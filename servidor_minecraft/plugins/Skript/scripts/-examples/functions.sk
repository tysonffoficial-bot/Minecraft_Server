
#
# A simple broadcasting function example.
# This demonstrates how to declare and run a simple function.
#

function say_message(message: text):
	broadcast {_message} # our message argument is available in `{_message}`.

on first join:
	wait 1 second
	say_message("Welcome, %player%!") # Runs the `say_message` function.

#
# An example of a function with multiple parameters and a return type.
# This demonstrates how to return a value and use it.
#

function give_apple(name: text, amount: number) :: item:
	set {_item} to an apple
	set the name of {_item} to {_name}
	set the item amount of {_item} to {_amount}
	return {_item} # Gives this value to the code that called the function.

command /appleexample:
	permission: skript.example.apple
	trigger:
		send "Giving you an apple!"
		set {_item} to give_apple("Banana", 4)
		give player {_item}

#
# An example of a recursive (self-calling) function that is used to repeat a complex task.
# Please note that self-calling functions can loop infinitely, so use with caution.
#

function destroy_gold(source: block) :: blocks:
	add {_source} to {_found::*}
	break {_source} naturally using an iron pickaxe
	loop blocks in radius 1 of {_source}:
		loop-block is a gold ore block
		break loop-block naturally using an iron pickaxe
		if {_found::*} does not contain loop-block:
			add destroy_gold(loop-block) to {_found::*}
	return {_found::*}

command /oreexample:
	permission: skript.example.ore
	trigger:
		if the player's target block is a gold ore block:
			send "Destroying all connected ore."
			set {_found::*} to destroy_gold(player's target block)
			send "Destroyed %size of {_found::*}% connected ores!"
		else:
			send "<red>You must be looking at an ore block!"
